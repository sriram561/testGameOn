{"ast":null,"code":"import _asyncToGenerator from\"C:/Users/dell/Documents/GitHub/test/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _regeneratorRuntime from\"C:\\\\Users\\\\dell\\\\Documents\\\\GitHub\\\\test\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";import{GoogleAuthProvider,signInWithPopup}from\"firebase/auth\";import{auth,db}from\"./firebase\";import{toast}from\"react-toastify\";import{setDoc,doc,getDoc,updateDoc}from\"firebase/firestore\";import React from'react';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function SignInwithGoogle(){function googleLogin(){return _googleLogin.apply(this,arguments);}function _googleLogin(){_googleLogin=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var provider,result,user,docRef,docSnap,userData;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:provider=new GoogleAuthProvider();_context.prev=1;_context.next=4;return signInWithPopup(auth,provider);case 4:result=_context.sent;user=result.user;if(!user){_context.next=22;break;}docRef=doc(db,\"Users\",user.uid);_context.next=10;return getDoc(docRef);case 10:docSnap=_context.sent;if(!docSnap.exists()){_context.next=18;break;}// Update only if necessary fields are missing\nuserData=docSnap.data();if(!(!userData.firstName||!userData.lastName||!userData.photo)){_context.next=16;break;}_context.next=16;return updateDoc(docRef,{firstName:userData.firstName||user.displayName.split(' ')[0],lastName:userData.lastName||user.displayName.split(' ')[1]||'',photo:userData.photo||user.photoURL,email:userData.email||user.email});case 16:_context.next=20;break;case 18:_context.next=20;return setDoc(docRef,{firstName:user.displayName.split(' ')[0],lastName:user.displayName.split(' ')[1]||'',photo:user.photoURL,email:user.email});case 20:toast.success(\"User logged in Successfully\",{position:\"top-center\"});window.location.href=\"/#/home\";case 22:_context.next=28;break;case 24:_context.prev=24;_context.t0=_context[\"catch\"](1);console.error(\"Error signing in with Google:\",_context.t0);toast.error(\"Failed to sign in with Google\",{position:\"top-center\"});case 28:case\"end\":return _context.stop();}}},_callee,null,[[1,24]]);}));return _googleLogin.apply(this,arguments);}return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{className:\"continue-p\",children:\"--Or continue with--\"}),/*#__PURE__*/_jsx(\"div\",{style:{display:\"flex\",justifyContent:\"center\",cursor:\"pointer\"},onClick:googleLogin,children:/*#__PURE__*/_jsxs(\"div\",{style:{border:\"2px solid #ac7474\",padding:\"1vh 0vw\"},children:[/*#__PURE__*/_jsx(\"img\",{src:require(\"../images/google.png\"),alt:\"Google Icon\",width:\"6%\"}),/*#__PURE__*/_jsx(\"span\",{style:{paddingLeft:\"2vw\"},children:\" Sign in with Google\"})]})})]});}export default SignInwithGoogle;","map":{"version":3,"sources":["C:/Users/dell/Documents/GitHub/test/src/components/signInWIthGoogle.js"],"names":["GoogleAuthProvider","signInWithPopup","auth","db","toast","setDoc","doc","getDoc","updateDoc","React","SignInwithGoogle","googleLogin","provider","result","user","docRef","uid","docSnap","exists","userData","data","firstName","lastName","photo","displayName","split","photoURL","email","success","position","window","location","href","console","error","display","justifyContent","cursor","border","padding","require","paddingLeft"],"mappings":"+PAAA,OAASA,kBAAT,CAA6BC,eAA7B,KAAoD,eAApD,CACA,OAASC,IAAT,CAAeC,EAAf,KAAyB,YAAzB,CACA,OAASC,KAAT,KAAsB,gBAAtB,CACA,OAASC,MAAT,CAAiBC,GAAjB,CAAsBC,MAAtB,CAA8BC,SAA9B,KAA+C,oBAA/C,CACA,MAAOC,CAAAA,KAAP,KAAkB,OAAlB,C,wFAEA,QAASC,CAAAA,gBAAT,EAA4B,SACXC,CAAAA,WADW,2IAC1B,oLACQC,QADR,CACmB,GAAIZ,CAAAA,kBAAJ,EADnB,uCAGyBC,CAAAA,eAAe,CAACC,IAAD,CAAOU,QAAP,CAHxC,QAGUC,MAHV,eAIUC,IAJV,CAIiBD,MAAM,CAACC,IAJxB,KAMQA,IANR,0BAOYC,MAPZ,CAOqBT,GAAG,CAACH,EAAD,CAAK,OAAL,CAAcW,IAAI,CAACE,GAAnB,CAPxB,wBAQ4BT,CAAAA,MAAM,CAACQ,MAAD,CARlC,SAQYE,OARZ,mBAUUA,OAAO,CAACC,MAAR,EAVV,0BAWQ;AACMC,QAZd,CAYyBF,OAAO,CAACG,IAAR,EAZzB,MAaY,CAACD,QAAQ,CAACE,SAAV,EAAuB,CAACF,QAAQ,CAACG,QAAjC,EAA6C,CAACH,QAAQ,CAACI,KAbnE,kDAcgBf,CAAAA,SAAS,CAACO,MAAD,CAAS,CACtBM,SAAS,CAAEF,QAAQ,CAACE,SAAT,EAAsBP,IAAI,CAACU,WAAL,CAAiBC,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,CADX,CAEtBH,QAAQ,CAAEH,QAAQ,CAACG,QAAT,EAAqBR,IAAI,CAACU,WAAL,CAAiBC,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,CAArB,EAAuD,EAF3C,CAGtBF,KAAK,CAAEJ,QAAQ,CAACI,KAAT,EAAkBT,IAAI,CAACY,QAHR,CAItBC,KAAK,CAAER,QAAQ,CAACQ,KAAT,EAAkBb,IAAI,CAACa,KAJR,CAAT,CAdzB,+DAuBctB,CAAAA,MAAM,CAACU,MAAD,CAAS,CACnBM,SAAS,CAAEP,IAAI,CAACU,WAAL,CAAiBC,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,CADQ,CAEnBH,QAAQ,CAAER,IAAI,CAACU,WAAL,CAAiBC,KAAjB,CAAuB,GAAvB,EAA4B,CAA5B,GAAkC,EAFzB,CAGnBF,KAAK,CAAET,IAAI,CAACY,QAHO,CAInBC,KAAK,CAAEb,IAAI,CAACa,KAJO,CAAT,CAvBpB,SA+BMvB,KAAK,CAACwB,OAAN,CAAc,6BAAd,CAA6C,CAC3CC,QAAQ,CAAE,YADiC,CAA7C,EAIAC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAuB,SAAvB,CAnCN,yFAsCIC,OAAO,CAACC,KAAR,CAAc,+BAAd,cACA9B,KAAK,CAAC8B,KAAN,CAAY,+BAAZ,CAA6C,CAC3CL,QAAQ,CAAE,YADiC,CAA7C,EAvCJ,qEAD0B,8CA8C1B,mBACE,oCACE,UAAG,SAAS,CAAC,YAAb,kCADF,cAEE,YACE,KAAK,CAAE,CAAEM,OAAO,CAAE,MAAX,CAAmBC,cAAc,CAAE,QAAnC,CAA6CC,MAAM,CAAE,SAArD,CADT,CAEE,OAAO,CAAE1B,WAFX,uBAIE,aAAK,KAAK,CAAE,CAAE2B,MAAM,CAAC,mBAAT,CAA8BC,OAAO,CAAC,SAAtC,CAAZ,wBACA,YAAK,GAAG,CAAEC,OAAO,CAAC,sBAAD,CAAjB,CAA2C,GAAG,CAAC,aAA/C,CAA6D,KAAK,CAAE,IAApE,EADA,cAEA,aAAM,KAAK,CAAE,CAACC,WAAW,CAAC,KAAb,CAAb,kCAFA,GAJF,EAFF,GADF,CAcD,CAED,cAAe/B,CAAAA,gBAAf","sourcesContent":["import { GoogleAuthProvider, signInWithPopup } from \"firebase/auth\";\nimport { auth, db } from \"./firebase\";\nimport { toast } from \"react-toastify\";\nimport { setDoc, doc, getDoc, updateDoc } from \"firebase/firestore\";\nimport React from 'react';\n\nfunction SignInwithGoogle() {\n  async function googleLogin() {\n    const provider = new GoogleAuthProvider();\n    try {\n      const result = await signInWithPopup(auth, provider);\n      const user = result.user;\n\n      if (user) {\n        const docRef = doc(db, \"Users\", user.uid);\n        const docSnap = await getDoc(docRef);\n\n        if (docSnap.exists()) {\n          // Update only if necessary fields are missing\n          const userData = docSnap.data();\n          if (!userData.firstName || !userData.lastName || !userData.photo) {\n            await updateDoc(docRef, {\n              firstName: userData.firstName || user.displayName.split(' ')[0],\n              lastName: userData.lastName || user.displayName.split(' ')[1] || '',\n              photo: userData.photo || user.photoURL,\n              email: userData.email || user.email,\n            });\n          }\n        } else {\n          // Set initial data if user document doesn't exist\n          await setDoc(docRef, {\n            firstName: user.displayName.split(' ')[0],\n            lastName: user.displayName.split(' ')[1] || '',\n            photo: user.photoURL,\n            email: user.email,\n          });\n        }\n\n        toast.success(\"User logged in Successfully\", {\n          position: \"top-center\",\n        });\n\n        window.location.href = \"/#/home\";\n      }\n    } catch (error) {\n      console.error(\"Error signing in with Google:\", error);\n      toast.error(\"Failed to sign in with Google\", {\n        position: \"top-center\",\n      });\n    }\n  }\n\n  return (\n    <div>\n      <p className=\"continue-p\">--Or continue with--</p>\n      <div\n        style={{ display: \"flex\", justifyContent: \"center\", cursor: \"pointer\"}}\n        onClick={googleLogin}\n      >\n        <div style={{ border:\"2px solid #ac7474\", padding:\"1vh 0vw\"}}>\n        <img src={require(\"../images/google.png\")} alt=\"Google Icon\" width={\"6%\"} />\n        <span style={{paddingLeft:\"2vw\"}}> Sign in with Google</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default SignInwithGoogle;\n"]},"metadata":{},"sourceType":"module"}